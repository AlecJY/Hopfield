package com.alebit.hopfield;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.util.ArrayList;

/**
 * Created by Alec on 2016/12/11.
 */
public class ResultForm {
    private JPanel resultPanel;
    private JTextPane trainingPane;
    private JTextPane testingPane;
    private JTextPane resultPane;
    private JScrollPane trainingScrollPane;
    private JScrollPane testingScrollPane;
    private JScrollPane resultScrollPane;

    public ResultForm(ArrayList<double[][]> trainingData, ArrayList<double[][]> testingData, ArrayList<double[][]> resultData) {
        trainingPane.setContentType("text/html");
        trainingPane.setText(dataString(trainingData));
        testingPane.setContentType("text/html");
        testingPane.setText(dataString(testingData));
        resultPane.setContentType("text/html");
        resultPane.setText(dataString(resultData));
    }

    public JPanel getPanel() {
        return resultPanel;
    }

    private String dataString(ArrayList<double[][]> dataSet) {
        StringBuilder s = new StringBuilder("<html><p><font size=\"5\">");
        for (double[][] data : dataSet) {
            for (int i = 0; i < data.length; i++) {
                for (int j = 0; j < data[0].length; j++) {
                    if (data[i][j] == 1) {
                        s.append("█");
                    } else {
                        s.append("▒");
                    }
                }
                s.append("<br/>");
            }
            s.append("<br/>");
        }
        s.append("</font></p></html>");
        return s.toString();
    }

    public void setScrollBar() {
        trainingScrollPane.getVerticalScrollBar().setValue(trainingScrollPane.getVerticalScrollBar().getMinimum());
        testingScrollPane.getVerticalScrollBar().setValue(testingScrollPane.getVerticalScrollBar().getMinimum());
        resultScrollPane.getVerticalScrollBar().setValue(resultScrollPane.getVerticalScrollBar().getMinimum());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        resultPanel = new JPanel();
        resultPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JTabbedPane tabbedPane1 = new JTabbedPane();
        tabbedPane1.setToolTipText("");
        resultPanel.add(tabbedPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 350), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("   Training   ", panel1);
        trainingScrollPane = new JScrollPane();
        trainingScrollPane.setAutoscrolls(false);
        trainingScrollPane.setHorizontalScrollBarPolicy(31);
        trainingScrollPane.setVerticalScrollBarPolicy(22);
        panel1.add(trainingScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        trainingPane = new JTextPane();
        trainingPane.setEditable(false);
        trainingPane.setEnabled(false);
        trainingScrollPane.setViewportView(trainingPane);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("   Testing   ", panel2);
        testingScrollPane = new JScrollPane();
        testingScrollPane.setHorizontalScrollBarPolicy(31);
        testingScrollPane.setVerticalScrollBarPolicy(22);
        panel2.add(testingScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        testingPane = new JTextPane();
        testingPane.setEditable(false);
        testingPane.setEnabled(false);
        testingScrollPane.setViewportView(testingPane);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("   Result   ", panel3);
        resultScrollPane = new JScrollPane();
        resultScrollPane.setHorizontalScrollBarPolicy(31);
        resultScrollPane.setVerticalScrollBarPolicy(22);
        panel3.add(resultScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        resultPane = new JTextPane();
        resultPane.setEditable(false);
        resultPane.setEnabled(false);
        resultScrollPane.setViewportView(resultPane);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return resultPanel;
    }
}
